<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GPDM Contact Directory</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    .container {
      max-width: 1200px;
      margin: auto;
      background: rgba(255, 255, 255, 0.95);
      border-radius: 24px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      color: white;
      padding: 40px;
      text-align: center;
      position: relative;
    }
    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: pulse 4s ease-in-out infinite;
    }
    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 0.5; }
      50% { transform: scale(1.1); opacity: 0.8; }
    }
    .header h1 {
      font-size: 2.5rem;
      position: relative;
      z-index: 1;
    }
    .header p {
      font-size: 1rem;
      position: relative;
      z-index: 1;
      opacity: 0.9;
    }
    .header .creator {
      position: absolute;
      bottom: 10px;
      right: 20px;
      font-size: 0.85rem;
      opacity: 0.5;
      z-index: 1;
    }
    .filters, .table-container {
      padding: 30px;
    }
    .filter-row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }
    .filter-group {
      flex: 1;
      min-width: 250px;
    }
    .filter-label {
      margin-bottom: 10px;
      font-weight: 600;
      color: #334155;
    }
    select {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      background: white;
      color: #334155;
      appearance: none;
      background-image: url("data:image/svg+xml,%3csvg fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M19 9l-7 7-7-7'%3e%3c/path%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 18px;
    }
    select:hover {
      border-color: #3b82f6;
    }
    .table-container {
      display: none;
      animation: fadeIn 0.5s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      border-radius: 12px;
      overflow: hidden;
    }
    th {
      background: #4f46e5;
      color: white;
      padding: 16px;
      text-align: left;
    }
    td {
      padding: 16px;
      border-bottom: 1px solid #f1f5f9;
    }
    tr:hover {
      background: #f8fafc;
    }
    .contact-count {
      margin-bottom: 10px;
      color: #64748b;
    }
    .copy-email {
      color: #2563eb;
      cursor: pointer;
      text-decoration: underline;
    }
    .copy-email:hover {
      color: #1e40af;
    }
    @media (max-width: 768px) {
      .filter-row { flex-direction: column; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>GPDM Contact Directory</h1>
      <p>Find and manage your contact list</p>
      <div class="creator">created by Anil</div>
    </div>
    <div class="filters">
      <div class="filter-row">
        <div class="filter-group">
          <label class="filter-label" for="fileUpload">Upload Excel File</label>
          <input type="file" id="fileUpload" accept=".xlsx,.xls" style="padding: 12px; border: 2px dashed #e2e8f0; border-radius: 12px; width: 100%; background: #f8fafc; cursor: pointer;">
          <small style="color: #64748b; margin-top: 5px; display: block;">Upload an Excel file with columns: Department, Team, Name, Position, Email</small>
        </div>
      </div>
      <div class="filter-row" style="margin-top: 20px;">
        <div class="filter-group">
          <label class="filter-label" for="department">Department</label>
          <select id="department">
            <option value="">Select Department (Upload Excel file first)</option>
          </select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="team">Team</label>
          <select id="team" disabled>
            <option value="">Select Team</option>
          </select>
        </div>
      </div>
    </div>
    <div class="table-container" id="tableContainer">
      <div class="contact-count" id="contactCount">0 contacts found</div>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Email</th>
          </tr>
        </thead>
        <tbody id="contactTableBody"></tbody>
      </table>
    </div>
  </div>

  <script>
    const departmentSelect = document.getElementById('department');
    const teamSelect = document.getElementById('team');
    const tableContainer = document.getElementById('tableContainer');
    const contactTableBody = document.getElementById('contactTableBody');
    const contactCount = document.getElementById('contactCount');

    const contactData = {};
    const departmentTeamMap = {};

    function handleFileUpload(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const worksheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(worksheet);

            Object.keys(contactData).forEach(key => delete contactData[key]);
            Object.keys(departmentTeamMap).forEach(key => delete departmentTeamMap[key]);

            jsonData.forEach(row => {
              const department = row.Department || row.department;
              const team = row.Team || row.team;
              const name = row.Name || row.name;
              const position = row.Position || row.position;
              const email = row.Email || row.email;

              if (department && team && name) {
                const dept = department.toLowerCase();
                const teamLower = team.toLowerCase();

                if (!contactData[dept]) {
                  contactData[dept] = {};
                  departmentTeamMap[dept] = [];
                }
                if (!contactData[dept][teamLower]) {
                  contactData[dept][teamLower] = [];
                  departmentTeamMap[dept].push({ value: teamLower, label: team });
                }
                contactData[dept][teamLower].push({
                  name: name,
                  position: position || 'N/A',
                  email: email || 'N/A'
                });
              }
            });

            departmentSelect.innerHTML = '<option value="">Select Department</option>';
            Object.keys(contactData).sort().forEach(dept => {
              const option = document.createElement('option');
              option.value = dept;
              option.textContent = dept.replace(/\b\w/g, c => c.toUpperCase());
              departmentSelect.appendChild(option);
            });

            alert('Excel file loaded successfully!');
          } catch (error) {
            console.error('Error processing file:', error);
            alert('Error processing the Excel file. Please check the file format.');
          }
        };
        reader.readAsArrayBuffer(file);
      }
    }

    departmentSelect.addEventListener('change', e => {
      const dept = e.target.value;
      teamSelect.innerHTML = '<option value="">Select Team</option>';
      contactTableBody.innerHTML = '';
      contactCount.textContent = '0 contacts found';
      tableContainer.style.display = 'none';

      if (dept && departmentTeamMap[dept]) {
        departmentTeamMap[dept].sort((a, b) => a.label.localeCompare(b.label)).forEach(({ value, label }) => {
          const opt = document.createElement('option');
          opt.value = value;
          opt.textContent = label;
          teamSelect.appendChild(opt);
        });
        teamSelect.disabled = false;
      } else {
        teamSelect.disabled = true;
      }
    });

    teamSelect.addEventListener('change', e => {
      const dept = departmentSelect.value;
      const team = e.target.value;

      if (dept && team && contactData[dept] && contactData[dept][team]) {
        const records = contactData[dept][team];
        contactTableBody.innerHTML = '';

        records.forEach(({ name, position, email }) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${name}</td>
            <td>${position}</td>
            <td><span class="copy-email" data-email="${email}" title="Click to copy">${email}</span></td>
          `;
          contactTableBody.appendChild(row);
        });

        contactCount.textContent = `${records.length} contacts found`;
        tableContainer.style.display = 'block';

        document.querySelectorAll('.copy-email').forEach(span => {
          span.addEventListener('click', (e) => {
            const email = e.currentTarget.getAttribute('data-email');
            navigator.clipboard.writeText(email)
              .then(() => showCopiedMessage(e.currentTarget))
              .catch(err => console.error('Clipboard copy failed', err));
          });
        });

      } else {
        tableContainer.style.display = 'none';
      }
    });

    document.getElementById('fileUpload').addEventListener('change', handleFileUpload);

    function showCopiedMessage(targetElement) {
      const tooltip = document.createElement('div');
      tooltip.textContent = 'Email copied!';
      tooltip.style.position = 'absolute';
      tooltip.style.background = '#1e3a8a';
      tooltip.style.color = '#fff';
      tooltip.style.padding = '4px 8px';
      tooltip.style.borderRadius = '6px';
      tooltip.style.fontSize = '0.85rem';
      tooltip.style.boxShadow = '0 2px 6px rgba(0,0,0,0.15)';
      tooltip.style.zIndex = 1000;
      tooltip.style.transition = 'opacity 0.3s ease';
      tooltip.style.opacity = 0;

      document.body.appendChild(tooltip);

      const rect = targetElement.getBoundingClientRect();
      tooltip.style.left = `${rect.left + window.scrollX + rect.width / 2 - 50}px`;
      tooltip.style.top = `${rect.top + window.scrollY - 30}px`;

      requestAnimationFrame(() => tooltip.style.opacity = 1);

      setTimeout(() => {
        tooltip.style.opacity = 0;
        setTimeout(() => document.body.removeChild(tooltip), 300);
      }, 1200);
    }
  </script>
</body>
</html>
