<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Contact List HTML Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #6a82fb 0%, #fc5c7d 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .generator-container {
            max-width: 600px;
            width: 100%;
            margin: auto;
            background: rgba(255, 255, 255, 0.98);
            border-radius: 24px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            padding: 40px;
        }
        h1 {
            font-size: 2rem;
            text-align: center;
            color: #1e3c72;
            margin-bottom: 10px;
        }
        p {
            text-align: center;
            color: #4b5563;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #334155;
        }
        input[type="text"], input[type="file"] {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 1rem;
            background: white;
            color: #334155;
        }
        input[type="file"] {
            padding: 10px;
            cursor: pointer;
        }
        button {
            width: 100%;
            padding: 16px;
            font-size: 1.1rem;
            font-weight: 700;
            color: white;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        button:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }
        .toast {
            position: fixed; top: 20px; right: 20px; background: #ef4444; color: white;
            padding: 12px 20px; border-radius: 8px; font-size: 14px; font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); z-index: 10000;
            transform: translateX(120%); transition: transform 0.3s ease;
        }
        .toast.show { transform: translateX(0); }
    </style>
</head>
<body>

    <div class="generator-container">
        <h1>Contact List Generator ⚙️</h1>
        <p>Create a standalone HTML contact list from your Excel file.</p>
        <form id="generatorForm">
            <div class="form-group">
                <label for="outputFileName">1. Enter Output File Name</label>
                <input type="text" id="outputFileName" value="contact-list.html" required>
            </div>
            <div class="form-group">
                <label for="excelUpload">2. Upload Excel File (.xlsx, .xls)</label>
                <input type="file" id="excelUpload" accept=".xlsx,.xls" required>
            </div>
            <button type="submit" id="generateBtn">Generate & Download HTML</button>
        </form>
    </div>

    <script>
        const generatorForm = document.getElementById('generatorForm');
        const generateBtn = document.getElementById('generateBtn');
        const excelUpload = document.getElementById('excelUpload');
        const outputFileNameInput = document.getElementById('outputFileName');

        generatorForm.addEventListener('submit', handleGeneration);

        function handleGeneration(event) {
            event.preventDefault();
            const file = excelUpload.files[0];
            const outputFileName = outputFileNameInput.value.trim();

            if (!file) {
                showToast("Please select an Excel file.");
                return;
            }
            if (!outputFileName) {
                showToast("Please provide an output file name.");
                return;
            }

            generateBtn.textContent = 'Processing...';
            generateBtn.disabled = true;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);

                    const { contactData, departmentTeamMap, originalCasing } = processExcelData(jsonData);

                    // --- MODIFICATION START ---
                    const pageTitle = generateTitleFromFileName(outputFileName); // ADDED: Generate a clean title
                    const generatedHtml = createFinalHtml(contactData, departmentTeamMap, originalCasing, pageTitle); // MODIFIED: Pass title to function
                    // --- MODIFICATION END ---
                    
                    downloadFile(generatedHtml, outputFileName);
                    
                    generateBtn.textContent = 'Generate & Download HTML';
                    generateBtn.disabled = false;
                } catch (error) {
                    showToast(`Error processing file: ${error.message}`);
                    generateBtn.textContent = 'Generate & Download HTML';
                    generateBtn.disabled = false;
                }
            };
            reader.onerror = function() {
                showToast('Failed to read the file.');
                generateBtn.textContent = 'Generate & Download HTML';
                generateBtn.disabled = false;
            };
            reader.readAsArrayBuffer(file);
        }

        // ADDED: New function to create a clean title from the file name
        function generateTitleFromFileName(fileName) {
            // Remove .html or .htm extension
            let title = fileName.toLowerCase().replace(/\.html?$/, '');
            // Replace hyphens and underscores with spaces
            title = title.replace(/[-_]/g, ' ');
            // Capitalize the first letter of each word
            return title.replace(/\b\w/g, char => char.toUpperCase());
        }

        function processExcelData(jsonData) {
            const contactData = {};
            const departmentTeamMap = {};
            const originalCasing = {};

            if (!jsonData || jsonData.length === 0) throw new Error("Excel file is empty or invalid.");

            const firstRow = jsonData[0];
            const requiredColumns = ['Department', 'Team', 'Name'];
            const availableColumns = Object.keys(firstRow);
            const missingColumns = requiredColumns.filter(col => 
                !availableColumns.some(availCol => availCol.toLowerCase() === col.toLowerCase())
            );
            if (missingColumns.length > 0) throw new Error(`Missing required columns: ${missingColumns.join(', ')}`);

            jsonData.forEach(row => {
                const department = row.Department || row.department;
                const team = row.Team || row.team;
                const name = row.Name || row.name;
                const position = row.Position || row.position;
                const email = row.Email || row.email;

                if (department && team && name) {
                    const deptLower = department.toString().toLowerCase();
                    const teamLower = team.toString().toLowerCase();

                    if (!originalCasing[deptLower]) {
                        originalCasing[deptLower] = { department: department.toString(), teams: {} };
                    }
                    if (!originalCasing[deptLower].teams[teamLower]) {
                        originalCasing[deptLower].teams[teamLower] = team.toString();
                    }
                    if (!contactData[deptLower]) {
                        contactData[deptLower] = {};
                        departmentTeamMap[deptLower] = [];
                    }
                    if (!contactData[deptLower][teamLower]) {
                        contactData[deptLower][teamLower] = [];
                        departmentTeamMap[deptLower].push({ value: teamLower, label: team.toString() });
                    }
                    contactData[deptLower][teamLower].push({
                        name: name.toString(),
                        position: position ? position.toString() : 'N/A',
                        email: email ? email.toString() : 'N/A'
                    });
                }
            });
            return { contactData, departmentTeamMap, originalCasing };
        }

        function downloadFile(content, fileName) {
            const blob = new Blob([content], { type: 'text/html' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.textContent = message;
            document.body.appendChild(toast);
            setTimeout(() => toast.classList.add('show'), 10);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.body.removeChild(toast), 300);
            }, 4000);
        }

        // MODIFIED: Function now accepts a 'title' parameter
        function createFinalHtml(contactData, departmentTeamMap, originalCasing, title) {
            const contactDataString = JSON.stringify(contactData, null, 2);
            const departmentTeamMapString = JSON.stringify(departmentTeamMap, null, 2);
            const originalCasingString = JSON.stringify(originalCasing, null, 2);

            return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${title}</title> <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Inter', sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; position: relative; }
    .container { max-width: 1200px; margin: auto; background: rgba(255, 255, 255, 0.95); border-radius: 24px; box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1); overflow: hidden; }
    .header { background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); color: white; padding: 40px; text-align: center; position: relative; }
    .header::before { content: ''; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%); animation: pulse 4s ease-in-out infinite; }
    @keyframes pulse { 0%, 100% { transform: scale(1); opacity: 0.5; } 50% { transform: scale(1.1); opacity: 0.8; } }
    .header h1 { font-size: 2.5rem; position: relative; z-index: 1; }
    .header p { font-size: 1rem; position: relative; z-index: 1; opacity: 0.9; }
    .header .creator { position: absolute; bottom: 10px; right: 20px; font-size: 0.85rem; opacity: 0.5; z-index: 1; }
    .filters, .table-container { padding: 30px; }
    .filter-row { display: flex; flex-wrap: wrap; gap: 20px; }
    .filter-group { flex: 1; min-width: 250px; }
    .filter-label { margin-bottom: 10px; font-weight: 600; color: #334155; }
    select { width: 100%; padding: 12px 16px; border: 2px solid #e2e8f0; border-radius: 12px; font-size: 1rem; background: white; color: #334155; appearance: none; background-image: url("data:image/svg+xml,%3csvg fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M19 9l-7 7-7-7'%3e%3c/path%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 10px center; background-size: 18px; }
    select:hover { border-color: #3b82f6; }
    .table-container { display: none; animation: fadeIn 0.5s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    table { width: 100%; border-collapse: collapse; background: white; border-radius: 12px; overflow: hidden; }
    th { background: #4f46e5; color: white; padding: 16px; text-align: left; }
    td { padding: 16px; border-bottom: 1px solid #f1f5f9; }
    tr:hover { background: #f8fafc; }
    .contact-count { margin-bottom: 10px; color: #64748b; }
    .copy-email { color: #2563eb; cursor: pointer; text-decoration: underline; position: relative; outline: none; padding: 2px 4px; border-radius: 4px; }
    .copy-email:hover { color: #1e40af; background-color: #f0f9ff; }
    .copy-email:focus { outline: 2px solid #3b82f6; outline-offset: 2px; }
    .toast { position: fixed; top: 20px; right: 20px; background: #10b981; color: white; padding: 12px 20px; border-radius: 8px; font-size: 14px; font-weight: 500; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); z-index: 10000; transform: translateX(120%); transition: transform 0.3s ease; opacity: 0;}
    .toast.show { transform: translateX(0); opacity: 1; }
    .toast.hide { transform: translateX(120%); opacity: 0; }
    .toast-container { position: fixed; top: 20px; right: 20px; z-index: 10000; display: flex; flex-direction: column; gap: 10px; }
    @media (max-width: 768px) { .filter-row { flex-direction: column; } }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>${title}</h1> <p>Find and manage your contact list</p>
      <div class="creator">created by Anil</div>
    </div>
    <div id="toastContainer" class="toast-container" aria-live="assertive" aria-atomic="true"></div>
    <div class="filters">
      <div class="filter-row">
        <div class="filter-group">
          <label class="filter-label" for="department">Department</label>
          <select id="department"><option value="">Select Department</option></select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="team">Team</label>
          <select id="team" disabled><option value="">Select Team</option></select>
        </div>
      </div>
    </div>
    <div class="table-container" id="tableContainer">
      <div class="contact-count" id="contactCount">0 contacts found</div>
      <table>
        <thead>
          <tr><th>Name</th><th>Position</th><th>Email</th></tr>
        </thead>
        <tbody id="contactTableBody"></tbody>
      </table>
    </div>
  </div>
  <script>
    const contactData = ${contactDataString};
    const departmentTeamMap = ${departmentTeamMapString};
    const originalCasing = ${originalCasingString};
    const departmentSelect = document.getElementById('department');
    const teamSelect = document.getElementById('team');
    const tableContainer = document.getElementById('tableContainer');
    const contactTableBody = document.getElementById('contactTableBody');
    const contactCount = document.getElementById('contactCount');
    document.addEventListener('DOMContentLoaded', () => {
        populateDepartmentDropdown();
        const totalContacts = Object.values(contactData).reduce((total, dept) => {
            return total + Object.values(dept).reduce((deptTotal, team) => deptTotal + team.length, 0);
        }, 0);
        if (totalContacts > 0) {
            showToast(\`Contact list loaded with \${totalContacts} contacts.\`, 'success');
        }
    });
    function populateDepartmentDropdown() {
      departmentSelect.innerHTML = '<option value="">Select Department</option>';
      Object.keys(contactData).sort().forEach(dept => {
        const option = document.createElement('option');
        option.value = dept;
        option.textContent = originalCasing[dept] ? originalCasing[dept].department : dept;
        departmentSelect.appendChild(option);
      });
    }
    departmentSelect.addEventListener('change', e => {
      const dept = e.target.value;
      teamSelect.innerHTML = '<option value="">Select Team</option>';
      contactTableBody.innerHTML = '';
      contactCount.textContent = '0 contacts found';
      tableContainer.style.display = 'none';
      if (dept && departmentTeamMap[dept]) {
        departmentTeamMap[dept].sort((a, b) => a.label.localeCompare(b.label)).forEach(({ value, label }) => {
          const opt = document.createElement('option');
          opt.value = value;
          opt.textContent = originalCasing[dept] && originalCasing[dept].teams[value] ? originalCasing[dept].teams[value] : label;
          teamSelect.appendChild(opt);
        });
        teamSelect.disabled = false;
      } else {
        teamSelect.disabled = true;
      }
    });
    teamSelect.addEventListener('change', e => {
      const dept = departmentSelect.value;
      const team = e.target.value;
      if (dept && team && contactData[dept] && contactData[dept][team]) {
        const records = contactData[dept][team];
        contactTableBody.innerHTML = '';
        records.forEach(({ name, position, email }) => {
          const row = document.createElement('tr');
          row.innerHTML = \`<td>\${name}</td><td>\${position}</td><td><span class="copy-email" data-email="\${email}" title="Click to copy email" role="button" tabindex="0">\${email}</span></td>\`;
          contactTableBody.appendChild(row);
        });
        contactCount.textContent = \`\${records.length} contacts found\`;
        tableContainer.style.display = 'block';
        document.querySelectorAll('.copy-email').forEach(span => {
          span.addEventListener('click', (e) => {
            copyEmail(e.currentTarget.getAttribute('data-email'));
          });
        });
      } else {
        tableContainer.style.display = 'none';
      }
    });
    function copyEmail(email) {
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(email).then(() => {
                showToast('Email copied to clipboard!', 'success');
            }).catch(err => {
                copyToClipboardFallback(email);
            });
        } else {
            copyToClipboardFallback(email);
        }
    }
    function copyToClipboardFallback(text) {
      try {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.top = '-9999px';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        if (successful) showToast('Email copied to clipboard!', 'success');
        else showToast('Failed to copy email.', 'error');
      } catch (err) {
        showToast('Failed to copy email.', 'error');
      }
    }
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toastContainer');
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.textContent = message;
      if (type === 'error') toast.style.background = '#ef4444';
      else if (type === 'success') toast.style.background = '#10b981';
      toastContainer.appendChild(toast);
      setTimeout(() => toast.classList.add('show'), 10);
      setTimeout(() => {
        toast.classList.add('hide');
        setTimeout(() => toast.parentNode.removeChild(toast), 300);
      }, 4000);
    }
  <\/script>
</body>
</html>`;
        }
    </script>
</body>
</html>
