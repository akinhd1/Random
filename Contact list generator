<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact List Generator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        /* Modern Design System using CSS Custom Properties */
        :root {
            --primary-color: #007bff;
            --primary-color-dark: #0056b3;
            --background-color: #f0f2f5;
            --card-background: #ffffff;
            --text-color: #333333;
            --text-color-light: #555555;
            --border-color: #dee2e6;
            --shadow-color: rgba(0, 0, 0, 0.08);
            --success-color: #28a745;
            --error-color: #dc3545;
            --info-color: #17a2b8;
            --warning-color: #ffc107;
            --drag-drop-border: #adb5bd;
            --drag-drop-hover: #007bff;
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            --transition-speed: 0.3s;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            width: 100%;
            max-width: 800px;
            background-color: var(--card-background);
            border-radius: 16px;
            box-shadow: 0 10px 30px var(--shadow-color);
            padding: 30px;
            box-sizing: border-box;
            transition: transform var(--transition-speed), box-shadow var(--transition-speed);
        }

        .container:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
        }

        h1 {
            text-align: center;
            color: var(--primary-color-dark);
            margin-bottom: 20px;
            font-size: 2.2em;
            letter-spacing: -0.5px;
        }

        h2 {
            margin-top: 30px;
            font-size: 1.5em;
            color: var(--text-color-light);
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }

        input[type="text"],
        input[type="file"] {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        input[type="text"]:focus,
        input[type="file"]:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.2);
        }

        .file-input-label {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 150px;
            border: 2px dashed var(--drag-drop-border);
            border-radius: 12px;
            cursor: pointer;
            text-align: center;
            transition: border-color var(--transition-speed), background-color var(--transition-speed);
        }

        .file-input-label:hover,
        .file-input-label.drag-over {
            border-color: var(--drag-drop-hover);
            background-color: rgba(0, 123, 255, 0.05);
        }

        .file-input-label i {
            font-size: 2em;
            color: var(--text-color-light);
            margin-bottom: 10px;
        }

        .file-info {
            margin-top: 10px;
            font-weight: 600;
            color: var(--primary-color-dark);
        }

        button {
            width: 100%;
            padding: 12px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color var(--transition-speed), transform 0.1s;
            font-weight: 600;
        }

        button:hover {
            background-color: var(--primary-color-dark);
        }

        button:disabled {
            background-color: #adb5bd;
            cursor: not-allowed;
            transform: none;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #fff;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: none;
            margin: 0 auto;
        }

        button:disabled .spinner {
            display: block;
        }

        button:disabled .button-text {
            display: none;
        }

        .validation-message {
            margin-top: 5px;
            font-size: 0.9em;
            color: var(--error-color);
            height: 1em;
            /* Reserve space to prevent layout shift */
        }

        .progress-container {
            margin-top: 25px;
            text-align: center;
        }

        .progress-bar-wrapper {
            width: 100%;
            background-color: var(--border-color);
            border-radius: 10px;
            overflow: hidden;
            height: 12px;
            margin-top: 10px;
        }

        .progress-bar {
            height: 100%;
            width: 0;
            background: linear-gradient(90deg, var(--primary-color), #4CAF50);
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        .statistics {
            margin-top: 30px;
            padding: 20px;
            background-color: var(--card-background);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            text-align: center;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease-out, transform 0.5s ease-out;
        }

        .statistics.show {
            opacity: 1;
            transform: translateY(0);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
        }

        .stat-item {
            background-color: var(--background-color);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s;
        }

        .stat-item:hover {
            transform: translateY(-3px);
        }

        .stat-item h3 {
            margin: 0 0 5px 0;
            color: var(--text-color-light);
            font-size: 1.1em;
        }

        .stat-item p {
            margin: 0;
            font-size: 1.8em;
            font-weight: 700;
            color: var(--primary-color);
        }

        /* Toast Notifications */
        #toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }

        .toast {
            background-color: var(--card-background);
            color: var(--text-color);
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            margin-top: 10px;
            display: flex;
            align-items: center;
            opacity: 0;
            transform: translateY(20px);
            animation: fade-in-up 0.5s forwards, fade-out-down 0.5s forwards 4.5s;
        }

        .toast.success {
            border-left: 5px solid var(--success-color);
        }

        .toast.error {
            border-left: 5px solid var(--error-color);
        }

        .toast.info {
            border-left: 5px solid var(--info-color);
        }

        .toast i {
            margin-right: 15px;
            font-size: 1.5em;
        }

        .toast.success i {
            color: var(--success-color);
        }

        .toast.error i {
            color: var(--error-color);
        }

        .toast.info i {
            color: var(--info-color);
        }

        /* Animations */
        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes fade-in-up {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fade-out-down {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(20px);
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Contact List Generator</h1>
        <form id="contact-form">
            <div class="form-group">
                <label for="file-input" class="file-input-label" id="drop-zone" tabindex="0">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <p>Drag & Drop your Excel file here, or click to browse.</p>
                    <span id="file-name" class="file-info">No file selected</span>
                </label>
                <input type="file" id="file-input" name="file" accept=".xls, .xlsx" style="display: none;">
                <div class="validation-message" id="file-validation-message"></div>
            </div>

            <div class="form-group">
                <label for="output-filename">Output Filename (e.g., my_contacts)</label>
                <input type="text" id="output-filename" name="output_filename" required>
                <div class="validation-message" id="filename-validation-message"></div>
            </div>
            
            <div class="progress-container" style="display: none;">
                <span id="progress-status">Preparing...</span>
                <div class="progress-bar-wrapper">
                    <div class="progress-bar" id="progress-bar"></div>
                </div>
            </div>

            <button type="submit" id="submit-button">
                <span class="button-text">Generate List</span>
                <span class="spinner"></span>
            </button>
        </form>

        <div id="statistics-display" class="statistics" style="display: none;">
            <h2>Generation Statistics</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <h3>Departments</h3>
                    <p id="departments-count">0</p>
                </div>
                <div class="stat-item">
                    <h3>Teams</h3>
                    <p id="teams-count">0</p>
                </div>
                <div class="stat-item">
                    <h3>Total Contacts</h3>
                    <p id="contacts-count">0</p>
                </div>
            </div>
        </div>

    </div>

    <div id="toast-container"></div>

    <script>
        class ContactListGenerator {
            constructor() {
                // DOM element references
                this.form = document.getElementById('contact-form');
                this.fileInput = document.getElementById('file-input');
                this.dropZone = document.getElementById('drop-zone');
                this.outputFilenameInput = document.getElementById('output-filename');
                this.submitButton = document.getElementById('submit-button');
                this.fileNameDisplay = document.getElementById('file-name');
                this.fileValidationMessage = document.getElementById('file-validation-message');
                this.filenameValidationMessage = document.getElementById('filename-validation-message');
                this.progressBarContainer = document.querySelector('.progress-container');
                this.progressBar = document.getElementById('progress-bar');
                this.progressStatus = document.getElementById('progress-status');
                this.statisticsDisplay = document.getElementById('statistics-display');

                // State
                this.selectedFile = null;
                this.debouncedValidationTimeout = null;
                this.isProcessing = false;

                // Bind methods to the class instance
                this.setupEventListeners = this.setupEventListeners.bind(this);
                this.handleFileChange = this.handleFileChange.bind(this);
                this.handleDragOver = this.handleDragOver.bind(this);
                this.handleDragLeave = this.handleDragLeave.bind(this);
                this.handleDrop = this.handleDrop.bind(this);
                this.handleFilenameValidation = this.handleFilenameValidation.bind(this);
                this.handleSubmit = this.handleSubmit.bind(this);
                this.processFile = this.processFile.bind(this);
                this.updateProgressBar = this.updateProgressBar.bind(this);
                this.showToast = this.showToast.bind(this);
                this.downloadFile = this.downloadFile.bind(this);
            }

            init() {
                this.setupEventListeners();
                this.updateUI();
            }

            setupEventListeners() {
                this.dropZone.addEventListener('click', () => this.fileInput.click());
                this.dropZone.addEventListener('dragover', this.handleDragOver);
                this.dropZone.addEventListener('dragleave', this.handleDragLeave);
                this.dropZone.addEventListener('drop', this.handleDrop);
                this.fileInput.addEventListener('change', this.handleFileChange);
                this.outputFilenameInput.addEventListener('keyup', this.handleFilenameValidation);
                this.outputFilenameInput.addEventListener('change', this.handleFilenameValidation);
                this.form.addEventListener('submit', this.handleSubmit);
            }

            updateUI() {
                const isFormValid = this.selectedFile && this.outputFilenameInput.value.trim() !== '' && this.filenameValidationMessage.textContent === '';
                this.submitButton.disabled = !isFormValid || this.isProcessing;
                this.submitButton.querySelector('.button-text').textContent = this.isProcessing ? 'Processing...' : 'Generate List';
                this.submitButton.querySelector('.spinner').style.display = this.isProcessing ? 'block' : 'none';
            }

            handleFileChange(event) {
                const file = event.target.files[0];
                if (file) {
                    this.selectedFile = file;
                    this.fileNameDisplay.textContent = file.name;
                    this.fileValidationMessage.textContent = '';
                } else {
                    this.selectedFile = null;
                    this.fileNameDisplay.textContent = 'No file selected';
                }
                this.updateUI();
            }

            handleDragOver(event) {
                event.preventDefault();
                this.dropZone.classList.add('drag-over');
                this.dropZone.querySelector('p').textContent = 'Drop the file here!';
                this.fileValidationMessage.textContent = '';
            }

            handleDragLeave(event) {
                this.dropZone.classList.remove('drag-over');
                this.dropZone.querySelector('p').textContent = 'Drag & Drop your Excel file here, or click to browse.';
            }

            handleDrop(event) {
                event.preventDefault();
                this.dropZone.classList.remove('drag-over');
                this.dropZone.querySelector('p').textContent = 'Drag & Drop your Excel file here, or click to browse.';
                const file = event.dataTransfer.files[0];
                if (file) {
                    this.fileInput.files = event.dataTransfer.files;
                    this.handleFileChange(event);
                }
            }

            handleFilenameValidation() {
                clearTimeout(this.debouncedValidationTimeout);
                this.debouncedValidationTimeout = setTimeout(() => {
                    const filename = this.outputFilenameInput.value.trim();
                    const forbiddenChars = /[\\/:\*\?"<>\|]/;
                    if (forbiddenChars.test(filename) || filename === '') {
                        this.filenameValidationMessage.textContent = 'Filename cannot be empty or contain \\ / : * ? " < > |';
                    } else {
                        this.filenameValidationMessage.textContent = '';
                    }
                    this.updateUI();
                }, 300);
            }

            async handleSubmit(event) {
                event.preventDefault();
                this.isProcessing = true;
                this.updateUI();
                this.statisticsDisplay.style.display = 'none';

                if (!this.selectedFile) {
                    this.showToast('Please select a file to process.', 'error', 'fa-solid fa-triangle-exclamation');
                    this.isProcessing = false;
                    this.updateUI();
                    return;
                }

                this.progressBarContainer.style.display = 'block';
                this.updateProgressBar(0, 'Starting...');

                try {
                    const data = await this.processFile(this.selectedFile);
                    
                    this.updateProgressBar(30, 'Processing data...');
                    const parsedData = this.parseExcelData(data);
                    
                    this.updateProgressBar(60, 'Generating HTML...');
                    const { html, stats } = this.createFinalHtml(parsedData, this.outputFilenameInput.value.trim());

                    this.updateProgressBar(90, 'Preparing for download...');
                    this.showStats(stats);
                    
                    this.downloadFile(html, `${this.outputFilenameInput.value.trim()}.html`);

                    this.updateProgressBar(100, 'Done!');
                    this.showToast('Contact list generated successfully!', 'success', 'fa-solid fa-circle-check');

                } catch (error) {
                    console.error('Generation failed:', error);
                    this.showToast(error.message, 'error', 'fa-solid fa-triangle-exclamation');
                    this.progressBarContainer.style.display = 'none';
                    this.progressBar.style.width = '0';
                    this.progressStatus.textContent = 'Failed';
                } finally {
                    this.isProcessing = false;
                    this.updateUI();
                }
            }

            processFile(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        try {
                            const data = new Uint8Array(e.target.result);
                            resolve(data);
                        } catch (err) {
                            reject(new Error('Failed to read the file. Please ensure it is a valid Excel file.'));
                        }
                    };
                    reader.onerror = () => {
                        reject(new Error('Failed to read the file. Please try again.'));
                    };
                    reader.readAsArrayBuffer(file);
                });
            }

            parseExcelData(data) {
                try {
                    const workbook = XLSX.read(data, { type: 'array' });
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                    if (jsonData.length < 2) {
                        throw new Error('The Excel file is empty or has no data.');
                    }
                    return jsonData;
                } catch (err) {
                    throw new Error('Failed to parse Excel data. Check the file format and try again.');
                }
            }

            createFinalHtml(data, filename) {
                const departments = {};
                const contacts = [];
                const header = data[0];
                const departmentCol = header.findIndex(h => h.toLowerCase().includes('department'));
                const teamCol = header.findIndex(h => h.toLowerCase().includes('team'));
                const nameCol = header.findIndex(h => h.toLowerCase().includes('name'));
                const positionCol = header.findIndex(h => h.toLowerCase().includes('position'));
                const emailCol = header.findIndex(h => h.toLowerCase().includes('email'));
                const phoneCol = header.findIndex(h => h.toLowerCase().includes('phone'));

                if ([departmentCol, teamCol, nameCol, positionCol, emailCol].some(col => col === -1)) {
                    throw new Error('Excel file must contain columns for "Department", "Team", "Name", "Position", and "Email".');
                }

                // Helper function to escape HTML to prevent XSS
                const escapeHtml = (unsafe) => {
                    return unsafe
                         .replace(/&/g, "&amp;")
                         .replace(/</g, "&lt;")
                         .replace(/>/g, "&gt;")
                         .replace(/"/g, "&quot;")
                         .replace(/'/g, "&#039;");
                };

                const title = this.generateTitleFromFileName(filename);
                
                // Use a DocumentFragment for efficient DOM manipulation
                const fragment = document.createDocumentFragment();

                for (let i = 1; i < data.length; i++) {
                    const row = data[i];
                    if (row.length === 0 || !row[nameCol]) continue; // Skip empty rows

                    const departmentName = row[departmentCol] ? String(row[departmentCol]).trim() : 'Uncategorized';
                    const teamName = row[teamCol] ? String(row[teamCol]).trim() : 'No Team';
                    const name = escapeHtml(String(row[nameCol]).trim());
                    const position = escapeHtml(String(row[positionCol]).trim());
                    const email = escapeHtml(String(row[emailCol]).trim());
                    const phone = row[phoneCol] ? escapeHtml(String(row[phoneCol]).trim()) : '';

                    const contact = { name, position, email, phone };

                    if (!departments[departmentName]) {
                        departments[departmentName] = {};
                    }
                    if (!departments[departmentName][teamName]) {
                        departments[departmentName][teamName] = [];
                    }
                    departments[departmentName][teamName].push(contact);
                    contacts.push(contact);
                }

                const stats = {
                    departments: Object.keys(departments).length,
                    teams: Object.values(departments).reduce((total, dept) => total + Object.keys(dept).length, 0),
                    totalContacts: contacts.length
                };

                let contentHtml = '';
                const sortedDeptNames = Object.keys(departments).sort();

                for (const deptName of sortedDeptNames) {
                    const dept = departments[deptName];
                    contentHtml += `
                    <div class="department">
                        <h2 class="department-heading" tabindex="0" role="button" aria-expanded="true" aria-controls="dept-${deptName.replace(/\s/g, '-')}-content">${escapeHtml(deptName)} <i class="fas fa-chevron-down"></i></h2>
                        <div class="department-content" id="dept-${deptName.replace(/\s/g, '-')}-content" role="region">
                    `;
                    const sortedTeamNames = Object.keys(dept).sort();
                    for (const teamName of sortedTeamNames) {
                        const team = dept[teamName];
                        contentHtml += `
                            <div class="team">
                                <h3 class="team-heading" tabindex="0" role="button" aria-expanded="true" aria-controls="team-${teamName.replace(/\s/g, '-')}-content">${escapeHtml(teamName)} <i class="fas fa-chevron-down"></i></h3>
                                <ul class="contact-list" id="team-${teamName.replace(/\s/g, '-')}-content" role="list">
                        `;
                        for (const contact of team) {
                            contentHtml += `
                                <li class="contact-card" role="listitem">
                                    <div class="contact-info">
                                        <p class="contact-name">${contact.name}</p>
                                        <p class="contact-position">${contact.position}</p>
                                    </div>
                                    <div class="contact-actions">
                                        <a href="mailto:${contact.email}" class="action-button" aria-label="Send email to ${contact.name}" role="button">
                                            <i class="fas fa-envelope"></i>
                                        </a>
                                        <button type="button" class="action-button copy-button" data-email="${contact.email}" aria-label="Copy email address for ${contact.name}">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                        ${contact.phone ? `
                                        <a href="tel:${contact.phone.replace(/\s/g, '')}" class="action-button" aria-label="Call ${contact.name}" role="button">
                                            <i class="fas fa-phone"></i>
                                        </a>
                                        ` : ''}
                                    </div>
                                </li>
                            `;
                        }
                        contentHtml += `</ul></div>`;
                    }
                    contentHtml += `</div></div>`;
                }

                const fullHtml = `
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>${title}</title>
                        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
                        <style>
                            /* --- Design System for Generated HTML --- */
                            :root {
                                --primary-color: #007bff;
                                --primary-color-dark: #0056b3;
                                --background-color: #f0f2f5;
                                --card-background: #ffffff;
                                --text-color: #333333;
                                --text-color-light: #555555;
                                --border-color: #dee2e6;
                                --shadow-color: rgba(0, 0, 0, 0.08);
                                --success-color: #28a745;
                                --error-color: #dc3545;
                                --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                                --transition-speed: 0.3s;
                                --spacing-unit: 1.5rem;
                            }
                            body {
                                font-family: var(--font-family);
                                background-color: var(--background-color);
                                color: var(--text-color);
                                margin: 0;
                                padding: var(--spacing-unit);
                                line-height: 1.6;
                            }
                            .header {
                                text-align: center;
                                margin-bottom: var(--spacing-unit);
                                animation: fade-in 1s ease-in-out;
                            }
                            h1 {
                                color: var(--primary-color-dark);
                                font-size: 2.5em;
                                margin-bottom: 0.5rem;
                            }
                            .search-container {
                                position: sticky;
                                top: 0;
                                z-index: 100;
                                background-color: var(--background-color);
                                padding: var(--spacing-unit) 0;
                                border-bottom: 1px solid var(--border-color);
                                margin-bottom: var(--spacing-unit);
                            }
                            #search-input {
                                width: 100%;
                                padding: 12px;
                                border: 1px solid var(--border-color);
                                border-radius: 8px;
                                font-size: 1em;
                                box-sizing: border-box;
                                transition: all var(--transition-speed);
                            }
                            #search-input:focus {
                                border-color: var(--primary-color);
                                outline: none;
                                box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.2);
                            }
                            .department {
                                background-color: var(--card-background);
                                border-radius: 12px;
                                box-shadow: 0 5px 20px var(--shadow-color);
                                margin-bottom: var(--spacing-unit);
                                padding: var(--spacing-unit);
                                transition: transform var(--transition-speed);
                            }
                            .department:hover {
                                transform: translateY(-5px);
                            }
                            .department-heading, .team-heading {
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                cursor: pointer;
                                padding: 15px 0;
                                border-bottom: 1px solid var(--border-color);
                                font-size: 1.5em;
                                font-weight: 600;
                                color: var(--text-color);
                            }
                            .department-heading:focus, .team-heading:focus {
                                outline: 2px solid var(--primary-color);
                                outline-offset: 4px;
                            }
                            .department-heading i, .team-heading i {
                                transition: transform var(--transition-speed);
                            }
                            .department-heading[aria-expanded="false"] i, .team-heading[aria-expanded="false"] i {
                                transform: rotate(-90deg);
                            }
                            .department-content, .team-content {
                                overflow: hidden;
                                transition: max-height var(--transition-speed) ease-in-out;
                                max-height: 1000px; /* An arbitrary large number for expansion */
                            }
                            .department-content.collapsed, .team-content.collapsed {
                                max-height: 0;
                            }
                            .team-heading {
                                font-size: 1.2em;
                                padding: 10px 0;
                                margin-top: 15px;
                                color: var(--text-color-light);
                            }
                            .contact-list {
                                list-style: none;
                                padding: 0;
                                margin: 0;
                            }
                            .contact-card {
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                background-color: var(--background-color);
                                border: 1px solid var(--border-color);
                                border-radius: 8px;
                                padding: 15px;
                                margin-top: 10px;
                                animation: slide-in 0.5s ease-out;
                            }
                            .contact-info {
                                flex-grow: 1;
                            }
                            .contact-name {
                                font-weight: 600;
                                margin: 0;
                                font-size: 1.1em;
                            }
                            .contact-position {
                                color: var(--text-color-light);
                                font-size: 0.9em;
                                margin: 0;
                            }
                            .contact-actions {
                                display: flex;
                                gap: 10px;
                            }
                            .action-button {
                                background: var(--primary-color);
                                color: white;
                                border: none;
                                border-radius: 50%;
                                width: 40px;
                                height: 40px;
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                cursor: pointer;
                                transition: background-color var(--transition-speed);
                                text-decoration: none;
                                flex-shrink: 0;
                            }
                            .action-button:hover {
                                background-color: var(--primary-color-dark);
                            }
                            .action-button:focus {
                                outline: 2px solid var(--primary-color);
                                outline-offset: 2px;
                            }
                            #toast-container {
                                position: fixed;
                                top: 20px;
                                right: 20px;
                                z-index: 1000;
                            }
                            .toast {
                                background-color: var(--card-background);
                                padding: 15px 20px;
                                border-radius: 8px;
                                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
                                margin-bottom: 10px;
                                display: flex;
                                align-items: center;
                                opacity: 0;
                                transform: translateX(20px);
                                animation: fade-in-right 0.5s forwards, fade-out-left 0.5s forwards 2.5s;
                            }
                            .toast.success {
                                border-left: 5px solid var(--success-color);
                            }
                            .toast.error {
                                border-left: 5px solid var(--error-color);
                            }
                            .toast i {
                                margin-right: 15px;
                                font-size: 1.5em;
                            }
                            .toast.success i {
                                color: var(--success-color);
                            }
                            .toast.error i {
                                color: var(--error-color);
                            }
                            @keyframes fade-in {
                                from { opacity: 0; transform: translateY(20px); }
                                to { opacity: 1; transform: translateY(0); }
                            }
                            @keyframes slide-in {
                                from { opacity: 0; transform: translateX(-20px); }
                                to { opacity: 1; transform: translateX(0); }
                            }
                            @keyframes fade-in-right {
                                from { opacity: 0; transform: translateX(20px); }
                                to { opacity: 1; transform: translateX(0); }
                            }
                            @keyframes fade-out-left {
                                from { opacity: 1; transform: translateX(0); }
                                to { opacity: 0; transform: translateX(-20px); }
                            }
                            @media (max-width: 768px) {
                                body { padding: 10px; }
                                .container { padding: 20px; }
                                h1 { font-size: 2em; }
                                .contact-card { flex-direction: column; text-align: center; }
                                .contact-actions { margin-top: 10px; }
                            }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on ${new Date().toLocaleDateString()}</p>
                        </div>
                        <div class="search-container">
                            <input type="text" id="search-input" placeholder="Search contacts...">
                        </div>
                        <main id="contact-list-container">
                            ${contentHtml}
                        </main>
                        <div id="toast-container"></div>
                        <script>
                            function init() {
                                document.querySelectorAll('.department-heading, .team-heading').forEach(header => {
                                    header.addEventListener('click', () => {
                                        const content = document.getElementById(header.getAttribute('aria-controls'));
                                        const isExpanded = header.getAttribute('aria-expanded') === 'true';
                                        header.setAttribute('aria-expanded', !isExpanded);
                                        content.classList.toggle('collapsed');
                                        content.style.maxHeight = isExpanded ? '0' : content.scrollHeight + 'px';
                                    });
                                });

                                document.querySelectorAll('.copy-button').forEach(button => {
                                    button.addEventListener('click', async () => {
                                        const email = button.getAttribute('data-email');
                                        try {
                                            await navigator.clipboard.writeText(email);
                                            showToast('Email copied to clipboard!', 'success');
                                        } catch (err) {
                                            // Fallback for older browsers
                                            const textarea = document.createElement('textarea');
                                            textarea.value = email;
                                            document.body.appendChild(textarea);
                                            textarea.select();
                                            document.execCommand('copy');
                                            document.body.removeChild(textarea);
                                            showToast('Email copied to clipboard! (Fallback)', 'success');
                                        }
                                    });
                                });

                                const searchInput = document.getElementById('search-input');
                                searchInput.addEventListener('keyup', () => {
                                    const searchTerm = searchInput.value.toLowerCase();
                                    document.querySelectorAll('.contact-card').forEach(card => {
                                        const textContent = card.textContent.toLowerCase();
                                        card.style.display = textContent.includes(searchTerm) ? 'flex' : 'none';
                                    });
                                });
                            }

                            function showToast(message, type) {
                                const container = document.getElementById('toast-container');
                                const toast = document.createElement('div');
                                toast.className = 'toast ' + type;
                                const icon = type === 'success' ? 'fa-solid fa-circle-check' : 'fa-solid fa-triangle-exclamation';
                                toast.innerHTML = \`<i class="\${icon}"></i><span>\${message}</span>\`;
                                container.appendChild(toast);
                                setTimeout(() => {
                                    toast.remove();
                                }, 3000);
                            }

                            document.addEventListener('DOMContentLoaded', init);
                        </script>
                    </body>
                    </html>
                `;

                return { html: fullHtml, stats };
            }

            updateProgressBar(progress, status) {
                this.progressBar.style.width = `${progress}%`;
                this.progressStatus.textContent = status;
            }

            showStats(stats) {
                document.getElementById('departments-count').textContent = stats.departments;
                document.getElementById('teams-count').textContent = stats.teams;
                document.getElementById('contacts-count').textContent = stats.totalContacts;
                this.statisticsDisplay.style.display = 'block';
                this.statisticsDisplay.classList.add('show');
            }

            generateTitleFromFileName(fileName) {
                return fileName.replace(/_/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
            }

            downloadFile(content, fileName) {
                const blob = new Blob([content], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                // Proper cleanup to prevent memory leaks
                URL.revokeObjectURL(url);
            }

            showToast(message, type, icon) {
                const container = document.getElementById('toast-container');
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.innerHTML = `<i class="${icon}"></i><span>${message}</span>`;
                container.appendChild(toast);
                setTimeout(() => {
                    toast.remove();
                }, 5000);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const app = new ContactListGenerator();
            app.init();
        });
    </script>
</body>
</html>
