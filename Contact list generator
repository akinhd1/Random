
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Contact List HTML Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            --success-color: #10b981;
            --error-color: #ef4444;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --hover-bg: #f8fafc;
            --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 25px 50px rgba(0, 0, 0, 0.15);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--primary-gradient);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow-x: hidden;
        }
        
        /* Animated background elements */
        body::before, body::after {
            content: '';
            position: fixed;
            border-radius: 50%;
            mix-blend-mode: multiply;
            filter: blur(40px);
            opacity: 0.7;
            animation: float 20s infinite ease-in-out;
        }
        
        body::before {
            width: 300px;
            height: 300px;
            background: rgba(102, 126, 234, 0.6);
            top: -150px;
            left: -150px;
        }
        
        body::after {
            width: 400px;
            height: 400px;
            background: rgba(118, 75, 162, 0.6);
            bottom: -200px;
            right: -200px;
            animation-delay: -10s;
        }
        
        @keyframes float {
            0%, 100% { transform: translate(0, 0) scale(1); }
            25% { transform: translate(50px, -50px) scale(1.1); }
            50% { transform: translate(-30px, 30px) scale(0.9); }
            75% { transform: translate(30px, 50px) scale(1.05); }
        }
        
        .generator-container {
            max-width: 600px;
            width: 100%;
            background: rgba(255, 255, 255, 0.98);
            border-radius: 24px;
            box-shadow: var(--shadow-xl);
            overflow: hidden;
            padding: 48px;
            position: relative;
            z-index: 1;
            backdrop-filter: blur(10px);
            animation: slideUp 0.6s ease-out;
        }
        
        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        h1 {
            font-size: 2.25rem;
            font-weight: 700;
            text-align: center;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 12px;
            animation: fadeIn 0.8s ease-out 0.2s both;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .subtitle {
            text-align: center;
            color: var(--text-secondary);
            margin-bottom: 40px;
            font-size: 1.1rem;
            animation: fadeIn 0.8s ease-out 0.3s both;
        }
        
        .form-group {
            margin-bottom: 28px;
            animation: fadeIn 0.8s ease-out 0.4s both;
        }
        
        .form-group:last-of-type {
            animation-delay: 0.5s;
        }
        
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.95rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .step-number {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
            background: var(--secondary-gradient);
            color: white;
            border-radius: 50%;
            font-size: 0.85rem;
            font-weight: 700;
        }
        
        input[type="text"], input[type="file"] {
            width: 100%;
            padding: 14px 18px;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 1rem;
            background: white;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }
        
        input[type="text"]:focus, input[type="file"]:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        input[type="file"] {
            padding: 12px;
            cursor: pointer;
            position: relative;
        }
        
        input[type="file"]::file-selector-button {
            padding: 8px 16px;
            margin-right: 12px;
            background: var(--hover-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        input[type="file"]::file-selector-button:hover {
            background: #f1f5f9;
            border-color: #cbd5e1;
        }
        
        button {
            width: 100%;
            padding: 16px;
            font-size: 1.1rem;
            font-weight: 700;
            color: white;
            background: var(--secondary-gradient);
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            animation: fadeIn 0.8s ease-out 0.6s both;
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s ease;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(30, 60, 114, 0.3);
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:active {
            transform: translateY(0);
            box-shadow: 0 5px 15px rgba(30, 60, 114, 0.2);
        }
        
        button:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        button:disabled::before {
            display: none;
        }
        
        /* Enhanced toast notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--error-color);
            color: white;
            padding: 16px 24px;
            border-radius: 12px;
            font-size: 0.95rem;
            font-weight: 500;
            box-shadow: var(--shadow-lg);
            z-index: 10000;
            transform: translateX(400px);
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            display: flex;
            align-items: center;
            gap: 12px;
            max-width: 400px;
        }
        
        .toast.success {
            background: var(--success-color);
        }
        
        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }
        
        .toast-icon {
            width: 20px;
            height: 20px;
            flex-shrink: 0;
        }
        
        /* File upload area enhancement */
        .file-upload-wrapper {
            position: relative;
            overflow: hidden;
        }
        
        .file-upload-wrapper.drag-over input[type="file"] {
            border-color: #667eea;
            background-color: rgba(102, 126, 234, 0.05);
        }
        
        /* Loading spinner */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Feature badges */
        .features {
            display: flex;
            gap: 12px;
            margin-top: 40px;
            padding-top: 32px;
            border-top: 1px solid var(--border-color);
            animation: fadeIn 0.8s ease-out 0.7s both;
        }
        
        .feature-badge {
            flex: 1;
            text-align: center;
            padding: 12px;
            background: var(--hover-bg);
            border-radius: 12px;
            font-size: 0.85rem;
            color: var(--text-secondary);
            font-weight: 500;
        }
        
        .feature-badge .icon {
            font-size: 1.5rem;
            margin-bottom: 4px;
            display: block;
        }
        
        /* Responsive design */
        @media (max-width: 640px) {
            .generator-container {
                padding: 32px 24px;
            }
            
            h1 {
                font-size: 1.875rem;
            }
            
            .subtitle {
                font-size: 1rem;
            }
            
            .features {
                flex-direction: column;
                gap: 8px;
            }
        }
        
        /* Accessibility improvements */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
        
        /* Focus styles */
        *:focus-visible {
            outline: 2px solid #667eea;
            outline-offset: 2px;
        }
    </style>
</head>
<body>
    <div class="generator-container">
        <h1>Contact List Generator</h1>
        <p class="subtitle">Transform your Excel files into beautiful, standalone HTML contact lists</p>
        
        <form id="generatorForm">
            <div class="form-group">
                <label for="outputFileName">
                    <span class="step-number">1</span>
                    Output File Name
                </label>
                <input 
                    type="text" 
                    id="outputFileName" 
                    value="contact-list.html" 
                    placeholder="e.g., team-contacts.html"
                    required
                    aria-label="Enter the name for your output HTML file"
                >
            </div>
            
            <div class="form-group">
                <label for="excelUpload">
                    <span class="step-number">2</span>
                    Upload Excel File
                </label>
                <div class="file-upload-wrapper" id="fileUploadWrapper">
                    <input 
                        type="file" 
                        id="excelUpload" 
                        accept=".xlsx,.xls" 
                        required
                        aria-label="Upload your Excel file containing contact information"
                    >
                </div>
            </div>
            
            <button type="submit" id="generateBtn">
                Generate & Download HTML
            </button>
        </form>
        
        <div class="features">
            <div class="feature-badge">
                <span class="icon">⚡</span>
                <div>Fast Processing</div>
            </div>
            <div class="feature-badge">
                <span class="icon">🔒</span>
                <div>Secure & Private</div>
            </div>
            <div class="feature-badge">
                <span class="icon">📱</span>
                <div>Mobile Ready</div>
            </div>
        </div>
    </div>

    <!-- PASTE PART 2 JAVASCRIPT CODE HERE -->
<script>
        const generatorForm = document.getElementById('generatorForm');
        const generateBtn = document.getElementById('generateBtn');
        const excelUpload = document.getElementById('excelUpload');
        const outputFileNameInput = document.getElementById('outputFileName');
        const fileUploadWrapper = document.getElementById('fileUploadWrapper');

        // Form submission handler
        generatorForm.addEventListener('submit', handleGeneration);

        // Drag and drop support
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            fileUploadWrapper.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            fileUploadWrapper.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            fileUploadWrapper.addEventListener(eventName, unhighlight, false);
        });

        fileUploadWrapper.addEventListener('drop', handleDrop, false);

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function highlight(e) {
            fileUploadWrapper.classList.add('drag-over');
        }

        function unhighlight(e) {
            fileUploadWrapper.classList.remove('drag-over');
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0 && (files[0].name.endsWith('.xlsx') || files[0].name.endsWith('.xls'))) {
                excelUpload.files = files;
                showToast(`File "${files[0].name}" loaded successfully`, 'success');
            } else {
                showToast('Please drop an Excel file (.xlsx or .xls)', 'error');
            }
        }

        function handleGeneration(event) {
            event.preventDefault();
            const file = excelUpload.files[0];
            const outputFileName = outputFileNameInput.value.trim();

            if (!file) {
                showToast("Please select an Excel file", 'error');
                return;
            }
            if (!outputFileName) {
                showToast("Please provide an output file name", 'error');
                return;
            }

            // Ensure filename ends with .html
            const finalFileName = outputFileName.endsWith('.html') ? outputFileName : outputFileName + '.html';

            generateBtn.innerHTML = '<span class="spinner"></span> Processing...';
            generateBtn.disabled = true;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    if (!workbook.SheetNames.length) {
                        throw new Error("Excel file contains no sheets");
                    }
                    
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);

                    if (!jsonData.length) {
                        throw new Error("Excel sheet is empty");
                    }

                    const { contactData, departmentTeamMap, originalCasing } = processExcelData(jsonData);
                    const pageTitle = generateTitleFromFileName(finalFileName);
                    const generatedHtml = createFinalHtml(contactData, departmentTeamMap, originalCasing, pageTitle);
                    
                    downloadFile(generatedHtml, finalFileName);
                    
                    const totalContacts = Object.values(contactData).reduce((total, dept) => {
                        return total + Object.values(dept).reduce((deptTotal, team) => deptTotal + team.length, 0);
                    }, 0);
                    
                    showToast(`Successfully generated HTML with ${totalContacts} contacts!`, 'success');
                    
                    generateBtn.innerHTML = 'Generate & Download HTML';
                    generateBtn.disabled = false;
                    
                    // Reset form
                    setTimeout(() => {
                        excelUpload.value = '';
                    }, 1000);
                    
                } catch (error) {
                    showToast(`Error: ${error.message}`, 'error');
                    generateBtn.innerHTML = 'Generate & Download HTML';
                    generateBtn.disabled = false;
                }
            };
            
            reader.onerror = function() {
                showToast('Failed to read the file', 'error');
                generateBtn.innerHTML = 'Generate & Download HTML';
                generateBtn.disabled = false;
            };
            
            reader.readAsArrayBuffer(file);
        }

        function generateTitleFromFileName(fileName) {
            let title = fileName.toLowerCase().replace(/\.html?$/, '');
            title = title.replace(/[-_]/g, ' ');
            return title.replace(/\b\w/g, char => char.toUpperCase());
        }

        function processExcelData(jsonData) {
            const contactData = {};
            const departmentTeamMap = {};
            const originalCasing = {};

            if (!jsonData || jsonData.length === 0) {
                throw new Error("Excel file is empty or invalid");
            }

            // Case-insensitive column detection
            const firstRow = jsonData[0];
            const columns = Object.keys(firstRow);
            
            const findColumn = (name) => {
                return columns.find(col => col.toLowerCase() === name.toLowerCase());
            };

            const deptCol = findColumn('department');
            const teamCol = findColumn('team');
            const nameCol = findColumn('name');
            
            if (!deptCol || !teamCol || !nameCol) {
                const missing = [];
                if (!deptCol) missing.push('Department');
                if (!teamCol) missing.push('Team');
                if (!nameCol) missing.push('Name');
                throw new Error(`Missing required columns: ${missing.join(', ')}`);
            }

            const posCol = findColumn('position');
            const emailCol = findColumn('email');

            let validRows = 0;
            jsonData.forEach((row, index) => {
                const department = row[deptCol];
                const team = row[teamCol];
                const name = row[nameCol];
                const position = posCol ? row[posCol] : null;
                const email = emailCol ? row[emailCol] : null;

                if (department && team && name) {
                    validRows++;
                    const deptLower = department.toString().trim().toLowerCase();
                    const teamLower = team.toString().trim().toLowerCase();

                    if (!originalCasing[deptLower]) {
                        originalCasing[deptLower] = { 
                            department: department.toString().trim(), 
                            teams: {} 
                        };
                    }
                    if (!originalCasing[deptLower].teams[teamLower]) {
                        originalCasing[deptLower].teams[teamLower] = team.toString().trim();
                    }
                    if (!contactData[deptLower]) {
                        contactData[deptLower] = {};
                        departmentTeamMap[deptLower] = [];
                    }
                    if (!contactData[deptLower][teamLower]) {
                        contactData[deptLower][teamLower] = [];
                        departmentTeamMap[deptLower].push({ 
                            value: teamLower, 
                            label: team.toString().trim() 
                        });
                    }
                    
                    contactData[deptLower][teamLower].push({
                        name: name.toString().trim(),
                        position: position ? position.toString().trim() : 'N/A',
                        email: email ? email.toString().trim() : 'N/A'
                    });
                }
            });

            if (validRows === 0) {
                throw new Error("No valid contact data found in the Excel file");
            }

            return { contactData, departmentTeamMap, originalCasing };
        }

        function downloadFile(content, fileName) {
            const blob = new Blob([content], { type: 'text/html;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        }

        function showToast(message, type = 'error') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const icon = document.createElement('div');
            icon.className = 'toast-icon';
            icon.innerHTML = type === 'success' 
                ? '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
                : '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
            
            const text = document.createElement('span');
            text.textContent = message;
            
            toast.appendChild(icon);
            toast.appendChild(text);
            document.body.appendChild(toast);
            
            setTimeout(() => toast.classList.add('show'), 10);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.body.removeChild(toast), 400);
            }, 4000);
        }

        // CONTINUE WITH PART 2B
function createFinalHtml(contactData, departmentTeamMap, originalCasing, title) {
            const contactDataString = JSON.stringify(contactData, null, 2);
            const departmentTeamMapString = JSON.stringify(departmentTeamMap, null, 2);
            const originalCasingString = JSON.stringify(originalCasing, null, 2);

            return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${title}</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --secondary-gradient: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      --success-color: #10b981;
      --error-color: #ef4444;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --border-color: #e2e8f0;
      --hover-bg: #f8fafc;
      --table-hover: #f1f5f9;
      --shadow-lg: 0 20px 40px rgba(0, 0, 0, 0.1);
    }
    
    body { 
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
      background: var(--primary-gradient); 
      min-height: 100vh; 
      padding: 20px; 
      position: relative; 
    }
    
    .container { 
      max-width: 1200px; 
      margin: auto; 
      background: rgba(255, 255, 255, 0.98); 
      border-radius: 24px; 
      box-shadow: var(--shadow-lg); 
      overflow: hidden;
      backdrop-filter: blur(10px);
    }
    
    .header { 
      background: var(--secondary-gradient); 
      color: white; 
      padding: 48px 40px; 
      text-align: center; 
      position: relative;
      overflow: hidden;
    }
    
    .header::before { 
      content: ''; 
      position: absolute; 
      top: -50%; 
      left: -50%; 
      width: 200%; 
      height: 200%; 
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%); 
      animation: pulse 4s ease-in-out infinite; 
    }
    
    @keyframes pulse { 
      0%, 100% { transform: scale(1); opacity: 0.5; } 
      50% { transform: scale(1.1); opacity: 0.8; } 
    }
    
    .header h1 { 
      font-size: 2.75rem; 
      font-weight: 700;
      position: relative; 
      z-index: 1; 
      margin-bottom: 8px;
    }
    
    .header p { 
      font-size: 1.125rem; 
      position: relative; 
      z-index: 1; 
      opacity: 0.95; 
    }
    
    .filters, .table-container { 
      padding: 40px; 
    }
    
    .filter-row { 
      display: flex; 
      flex-wrap: wrap; 
      gap: 24px; 
    }
    
    .filter-group { 
      flex: 1; 
      min-width: 280px; 
    }
    
    .filter-label { 
      display: block;
      margin-bottom: 12px; 
      font-weight: 600; 
      color: var(--text-primary); 
      font-size: 0.95rem;
    }
    
    select { 
      width: 100%; 
      padding: 14px 18px; 
      padding-right: 40px;
      border: 2px solid var(--border-color); 
      border-radius: 12px; 
      font-size: 1rem; 
      background: white; 
      color: var(--text-primary); 
      appearance: none; 
      background-image: url("data:image/svg+xml,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M5 7.5L10 12.5L15 7.5' stroke='%23334155' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e");
      background-repeat: no-repeat; 
      background-position: right 16px center; 
      background-size: 20px;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    select:hover { 
      border-color: #667eea; 
    }
    
    select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    select:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .table-container { 
      display: none; 
      animation: fadeIn 0.5s ease-in-out; 
    }
    
    @keyframes fadeIn { 
      from { opacity: 0; transform: translateY(20px); } 
      to { opacity: 1; transform: translateY(0); } 
    }
    
    .table-wrapper {
      background: white;
      border-radius: 16px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      overflow: hidden;
    }
    
    table { 
      width: 100%; 
      border-collapse: collapse; 
      background: white; 
    }
    
    th { 
      background: var(--secondary-gradient); 
      color: white; 
      padding: 18px 24px; 
      text-align: left; 
      font-weight: 600;
      font-size: 0.95rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    td { 
      padding: 18px 24px; 
      border-bottom: 1px solid var(--border-color); 
      color: var(--text-primary);
    }
    
    tr:last-child td {
      border-bottom: none;
    }
    
    tr:hover { 
      background: var(--table-hover); 
    }
    
    .contact-count { 
      margin-bottom: 16px; 
      color: var(--text-secondary); 
      font-weight: 500;
      font-size: 0.95rem;
    }
    
    .copy-email { 
      color: #2563eb; 
      cursor: pointer; 
      text-decoration: underline; 
      position: relative; 
      outline: none; 
      padding: 2px 4px; 
      border-radius: 4px; 
      transition: all 0.2s ease;
    }
    
    .copy-email:hover { 
      color: #1e40af; 
      background-color: #f0f9ff; 
    }
    
    .copy-email:focus { 
      outline: 2px solid #3b82f6; 
      outline-offset: 2px; 
    }
    
    .toast { 
      position: fixed; 
      top: 20px; 
      right: 20px; 
      background: var(--success-color); 
      color: white; 
      padding: 16px 24px; 
      border-radius: 12px; 
      font-size: 0.95rem; 
      font-weight: 500; 
      box-shadow: var(--shadow-lg); 
      z-index: 10000; 
      transform: translateX(400px); 
      opacity: 0;
      transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .toast.show { 
      transform: translateX(0); 
      opacity: 1; 
    }
    
    .toast.error {
      background: var(--error-color);
    }
    
    .toast-icon {
      width: 20px;
      height: 20px;
      flex-shrink: 0;
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: var(--text-secondary);
    }
    
    .empty-state-icon {
      font-size: 3rem;
      margin-bottom: 16px;
      opacity: 0.5;
    }
    
    @media (max-width: 768px) { 
      .filter-row { flex-direction: column; } 
      .header h1 { font-size: 2rem; }
      .filters, .table-container { padding: 24px; }
      th, td { padding: 12px 16px; }
    }
    
    @media (prefers-reduced-motion: reduce) {
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>${title}</h1>
      <p>Find and connect with your team members</p>
    </div>
    <div class="filters">
      <div class="filter-row">
        <div class="filter-group">
          <label class="filter-label" for="department">Department</label>
          <select id="department"><option value="">Select Department</option></select>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="team">Team</label>
          <select id="team" disabled><option value="">Select Team</option></select>
        </div>
      </div>
    </div>
    <div class="table-container" id="tableContainer">
      <div class="contact-count" id="contactCount">0 contacts found</div>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr><th>Name</th><th>Position</th><th>Email</th></tr>
          </thead>
          <tbody id="contactTableBody"></tbody>
        </table>
      </div>
    </div>
  </div>
  <script>
    const contactData = ${contactDataString};
    const departmentTeamMap = ${departmentTeamMapString};
    const originalCasing = ${originalCasingString};
    const departmentSelect = document.getElementById('department');
    const teamSelect = document.getElementById('team');
    const tableContainer = document.getElementById('tableContainer');
    const contactTableBody = document.getElementById('contactTableBody');
    const contactCount = document.getElementById('contactCount');
    
    document.addEventListener('DOMContentLoaded', () => {
        populateDepartmentDropdown();
        const totalContacts = Object.values(contactData).reduce((total, dept) => {
            return total + Object.values(dept).reduce((deptTotal, team) => deptTotal + team.length, 0);
        }, 0);
        if (totalContacts > 0) {
            showToast(\`Contact list loaded with \${totalContacts} contacts.\`, 'success');
        }
    });
    
    function populateDepartmentDropdown() {
      departmentSelect.innerHTML = '<option value="">Select Department</option>';
      Object.keys(contactData).sort().forEach(dept => {
        const option = document.createElement('option');
        option.value = dept;
        option.textContent = originalCasing[dept] ? originalCasing[dept].department : dept;
        departmentSelect.appendChild(option);
      });
    }
    
    departmentSelect.addEventListener('change', e => {
      const dept = e.target.value;
      teamSelect.innerHTML = '<option value="">Select Team</option>';
      contactTableBody.innerHTML = '';
      contactCount.textContent = '0 contacts found';
      tableContainer.style.display = 'none';
      if (dept && departmentTeamMap[dept]) {
        departmentTeamMap[dept].sort((a, b) => a.label.localeCompare(b.label)).forEach(({ value, label }) => {
          const opt = document.createElement('option');
          opt.value = value;
          opt.textContent = originalCasing[dept] && originalCasing[dept].teams[value] ? originalCasing[dept].teams[value] : label;
          teamSelect.appendChild(opt);
        });
        teamSelect.disabled = false;
      } else {
        teamSelect.disabled = true;
      }
    });
    
    teamSelect.addEventListener('change', e => {
      const dept = departmentSelect.value;
      const team = e.target.value;
      if (dept && team && contactData[dept] && contactData[dept][team]) {
        const records = contactData[dept][team];
        contactTableBody.innerHTML = '';
        records.forEach(({ name, position, email }) => {
          const row = document.createElement('tr');
          row.innerHTML = \`<td>\${name}</td><td>\${position}</td><td><span class="copy-email" data-email="\${email}" title="Click to copy email" role="button" tabindex="0">\${email}</span></td>\`;
          contactTableBody.appendChild(row);
        });
        contactCount.textContent = \`\${records.length} contacts found\`;
        tableContainer.style.display = 'block';
        document.querySelectorAll('.copy-email').forEach(span => {
          span.addEventListener('click', (e) => {
            copyEmail(e.currentTarget.getAttribute('data-email'));
          });
          span.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              copyEmail(e.currentTarget.getAttribute('data-email'));
            }
          });
        });
      } else {
        tableContainer.style.display = 'none';
      }
    });
    
    function copyEmail(email) {
        if (email === 'N/A') {
            showToast('No email address available', 'error');
            return;
        }
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(email).then(() => {
                showToast('Email copied to clipboard!', 'success');
            }).catch(err => {
                copyToClipboardFallback(email);
            });
        } else {
            copyToClipboardFallback(email);
        }
    }
    
    function copyToClipboardFallback(text) {
      try {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.top = '-9999px';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        if (successful) showToast('Email copied to clipboard!', 'success');
        else showToast('Failed to copy email.', 'error');
      } catch (err) {
        showToast('Failed to copy email.', 'error');
      }
    }
    
    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = \`toast \${type}\`;
      
      const icon = document.createElement('div');
      icon.className = 'toast-icon';
      icon.innerHTML = type === 'success' 
        ? '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
        : '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
      
      const text = document.createElement('span');
      text.textContent = message;
      
      toast.appendChild(icon);
      toast.appendChild(text);
      document.body.appendChild(toast);
      
      setTimeout(() => toast.classList.add('show'), 10);
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.parentNode.removeChild(toast), 400);
      }, 4000);
    }
  <\/script>
</body>
</html>`;
        }
    </script>

</body>
</html>
